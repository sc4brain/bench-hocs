
//{chdir("./hoc/bench")}

{load_file("nrngui.hoc")}
load_file("stdrun.hoc")
CACHE_EFFICIENT=1
// non zero ==ture
Debug=1

if (!name_declared("MODEL")) { MODEL=0 }
if (!name_declared("NSTIM_POS")) { NSTIM_POS=1 }
if (!name_declared("NSTIM_NUM")) { NSTIM_NUM=2 }
if (!name_declared("NCELLS")) { NCELLS=2 }
if (!name_declared("NSYNAPSE")) { NSYNAPSE=2 }
if (!name_declared("SYNAPSE_RANGE")) { SYNAPSE_RANGE=1 }
if (!name_declared("STOPTIME")) { STOPTIME=100 }
if (!name_declared("NETWORK")) { NETWORK=0 }
if (!name_declared("NTHREAD")) { NTHREAD=1 }
if (!name_declared("MULTISPLIT")) { MULTISPLIT=0 }
if (!name_declared("SPIKE_COMPRESS")) { CACHE_EFFICIENT=1 }
if (!name_declared("SPIKE_COMPRESS")) { SPIKE_COMPRESS=1 }

if (!name_declared("SHOW_SPIKE")) { SHOW_SPIKE=1 }
if (!name_declared("DBG_PRINT")) { DBG_PRINT=1 }
printf("STOPTIME=%lf\n",STOPTIME)
print STOPTIME

{load_file("CellTemplate_BN_1056_Parallel3.hoc")}
{load_file("CellSwc2_nrn8.hoc")}
// {load_file("CellTemplate_LineCell_091002.hoc")} 
objref pc
objref cells, nclist
objref stim, ncstim, ncstimlist, stimlist, synlist,  iclamplist
objref tvec, idvec, svec, sgidvec

// core
// make sure NEURON is compiled with Python

// chk 1
// dt=0.025
// if(pc.id == 0){ printf("check1  * NSTEP=%d (STOPTIME=%lf / dt=%lf)\n", STOPTIME/dt, STOPTIME, dt)}
// dt is not defined
// if (!nrnpython("from neuron import coreneuron")) {
//  printf("NEURON not compiled with Python support\n")
//  return
// }

// access coreneuron module via Python object
//tstop = STOPTIME
//    objref cvode
//    cvode = new CVode()
//    mode = cvode.cache_efficient(1)
    
objref py_obj
py_obj = new PythonObject()
nrnpython("from neuron import coreneuron")
//nrnpython("from strtobool import strtobool; import os")
//py_obj.coreneuron.enable =  True
//nrnpython("from distutils.util import strtobool; import os; coreneuron.gpu=bool(strtobool(os.environ.get('CORENRN_ENABLE_GPU', 'false')))")
//nrnpython("from distutils.util import strtobool; import os; coreneuron.gpu=bool(strtobool(os.environ.get('CORENRN_ENABLE_GPU', 'false')))")
//printf("nrncore_arg: |%s|\n", py_obj.coreneuron.nrncore_arg(STOPTIME))
//printf("core neuron on.\n")
//not good load_file("coreneuron/nrnmech.hoc")



proc mkcells () { local i, n, j, num_cell localobj cell, nc, syn, nil
    cells = new List()
    tvec = new Vector()
    idvec = new Vector()
    nclist = new List()
    synlist = new List()
    num_cell = $1
    n = int(num_cell/pc.nhost)
    
    for(i=0; i<n; i+=1){
//	cell = new Cell_BN_1056()
	cell = new CellSwc("Swc_BN_1056.swc")
//	cell = new Cell_Line(0,0,0,3000)
	cells.append(cell)
	pc.set_gid2node(i + (n * pc.id), pc.id)
	nc = cell.makeNetCon(2500, nil, 0, 0, 1.0)   //2500->2300
	pc.cell(i + (n * pc.id), nc)
	nc.delay = 0.1 // 0.6
//     nc.weight = 0.05
       nc.weight = 5
// add threthold
        nc.threshold = -30
	nc.record(tvec, idvec, nc.srcgid)
	nclist.append(nc)
	
	syn = cell.makeSyn(300, 1, 5, 0)
	synlist.append(syn)
    }
    pc.barrier()
}


tmp_pre=0
tmp_post=0

proc connectcells(){ local i, target_id, network_type, num_cell, num_synapse, num_comp, synapse_range localobj src, target, syn, nc, cell, rnd, nil
    pc.barrier()
    num_cell = $1
    network_type = $2
    num_synapse = $3
    synapse_range = $4
    num_comp = 3800
    
    rnd = new Random()
    rnd.Random123(12345)
    rnd.uniform(0, num_cell-1)
    if(network_type == 0 || network_type == 1 || network_type==2){
	for(i=0; i<num_cell; i=i+1){
	    if(pc.gid_exists(i)){
		for(j=0; j<num_synapse; j=j+1){
                    cell = pc.gid2obj(i)
                    pc.set_gid2node(3.2e5+i*num_synapse+j, pc.id)

		    if(network_type==2){
	                    nc = cell.makeNetCon((1+i*num_synapse+j)%num_comp, nil, 0, 0, 0.1)
		    }else{
	                    nc = cell.makeNetCon(-1, nil, 0, 0, 0.1)
		    }

                    pc.cell(3.2e5+i*num_synapse+j, nc)
		    nclist.append(nc)
		    nc.delay = 0.5 // 0.6
		    nc.weight = 0.05
		    tmp_pre=tmp_pre+1
		}
	    }
printf("connection prepared")
}
	pc.barrier()

	for(i=0; i<num_cell; i=i+1){
	    for(j=0; j<num_synapse; j=j+1){
		if(network_type==0){
		    target_id = (1+i+j*synapse_range)%num_cell
		}else if(network_type==1 || network_type==2){
		    target_id = int(rnd.repick())
		}
		if(pc.gid_exists(target_id) && i!=target_id){
		    target = pc.gid2cell(target_id)
		    if(network_type==2){
			    syn = target.makeSyn((100+i*num_synapse+j)%num_comp, 1, 5, 0)
		    }else{
			    syn = target.makeSyn(-1, 1, 5, 0)
		    }
		    
		    nc = pc.gid_connect(32000000+i*num_synapse+j, syn)
		    nclist.append(nc)
		    nc.delay = 0.5 // 0.6
		    nc.weight = 0.05
		    synlist.append(syn)
		    tmp_post=tmp_post+1
		}
	    }
	}
    }else{
	printf("ERROR : invalid network type.\n")
	quit()
    }
printf("connection finished")
}

proc setModel(){
    model = $1
    
    if(model==1){
	forall { insert pas }
    }else if(model==2){
	forall { insert hh }
//    }else if(model==3){
  //      forall {insert hh_euler }
 //   }else if(model==4){
 //       forall {insert hh_runge }
  //  }else if(model==5){
 //       forall {insert hh_impl }
 //   }else if(model==6){
 //       forall {insert hh_cnexp }
  //  }else if(model==7){
  //      forall {insert hh_runge_notable }
   // }else if(model==8){
   //     forall {insert hh_cnexp_notable }
  //  }else if(model==9){
  //      forall {insert hh2CW }
   // }else if(model==10){
    //    forall {insert hh2F }
   // }else if(model==11){
   //     forall {insert hh2CW_many }
    }else{
	forall { insert hh }
    }
}


proc print_stat() {
    for i = 0, cells.count-1 {
	printf("[proc:%02d] synlist %d\n", pc.id, cells.object(i).synlist.count())
    }
}


// $1 : cell id for stimulate
proc mkstim() { local i, num_stim_pos, stim_cell, num_cell, num_stim
    num_cell = $1
    num_stim_pos = $2
    num_stim = $3
    ncstimlist = new List()
    stimlist = new List()

    for(i=0; i<num_stim; i=i+1){
	stim_cell = i * (num_cell/(num_stim+1))
	if(pc.gid_exists(stim_cell)){
	       printf("[makestim:%d] CELL %d\n", pc.id, stim_cell)
	    stim = new NetStim()

	    	    stim.number = 30

	      stim.start = 10

	    stim.interval = 30
            printf("stim num and intervael(%d,%d )", stim.number, stim.interval)		    
	    ncstim = new NetCon(stim, pc.gid2cell(stim_cell).synlist.object(0))
            //pc.set_gid2node(20000+i,
	    ncstim.delay = 1

	    //ncstim.weight = 3
	    ncstim.weight = 30
	    
	    stimlist.append(stim)
	    ncstimlist.append(ncstim)
	}
    }
printf("mkstim finished")
}







proc spikeout() { local i, count, rank localobj fobj, tmpmt
    
    strdef filename
    count = 0
    fobj = new File()
    tmpmt = new Matrix()
    sprint(filename, "./result/spike_%010d.txt", pc.id)
    fobj.wopen(filename)
    fobj.printf("time [ms]\t cell_id\n")
    tmpmt.resize(tvec.size(),2)
    tmpmt.setcol(0, tvec)
    tmpmt.setcol(1, idvec)
    tmpmt.fprint(0, fobj, "\t%g\t")
    fobj.close
    
    
    if(pc.id == 0){ printf("\n\ttime [ms]\t cell_id\n") }
    pc.barrier()
    for i=0, tvec.size()-1{
	printf("SPIKE : \t %f\t %d\n", tvec.x[i], idvec.x[i])
    }
}


proc printSpikeStat() { local nsendmax, nsend, nrecv, nrecv_useful
    nsendmax = pc.spike_statistics(&nsend, &nrecv, &nrecv_useful)
    printf("[%d] nsendmax=%d nsend=%d nrecv=%d nrecv_useful=%d\n", pc.id, nsendmax, nsend,nrecv, nrecv_useful)
}

// start main
// main kakko
proc main(){  
printf("main-STOPTIME=%lf\n",STOPTIME)
/// test coreneuron-2
// access coreneuron module via Python object
//py_obj.coreneuron.enable =  1
 objref cvode
 cvode = new CVode()
 mode = cvode.cache_efficient(1)
// objref py_obj
 py_obj = new PythonObject()

//py_obj.coreneuron.enable =  1
//0919 need?
//finitialize?

//nrnpython("from neuron.tests.utils.strtobool import strtobool; import os; coreneuron.gpu=bool(strtobool(os.environ.get('CORENRN_ENABLE_GPU', 'false')))")
 nrnpython("from distutils.util import strtobool; import os; coreneuron.gpu=bool(strtobool(os.environ.get('CORENRN_ENABLE_GPU', 'false')))")
 nrnpython("coreneuron.gpu=bool(strtobool(os.environ.get('CORENRN_ENABLE_GPU', 'false')))")

 printf("nrncore_arg: |%s|\n", py_obj.coreneuron.nrncore_arg(STOPTIME))
 printf("core neuron on.\n")
// test end

// if(pc.id == 0){ printf("check2  * NSTEP=%d (STOPTIME=%lf / dt=%lf)\n", STOPTIME/dt, STOPTIME, dt)}
stdinit()

    pc = new ParallelContext()
    if(NTHREAD != 0){ pc.nthread(NTHREAD) }
    if(SPIKE_COMPRESS==1){
	if(pc.id ==0){ printf("pc.spike_compress(1, 0)\n") }
	pc.spike_compress(1, 0)
    }else if(SPIKE_COMPRESS==2){
	pc.spike_compress(0, 1, 1)
    }

printf("id %d",pc.id)    
    if(pc.id == 0){
	printf("\nCondition : \n")
	printf(" * Process=%d, Thread=%d\n", pc.nhost, NTHREAD)
	printf(" * NSTEP=%d (STOPTIME=%lf / dt=%lf)\n", STOPTIME/dt, STOPTIME, dt)
	printf(" * Model=%s, nCELLS=%d, nSYNAPSE=%d\n", "BN_1056", NCELLS, NSYNAPSE)
	printf(" * NSTIM_POS=%d, NSTIM_NUM=%d, SYNAPSE_RANGE=%d\n", NSTIM_POS, NSTIM_NUM, SYNAPSE_RANGE)
	printf(" * CacheEfficient=%d, SpikeCompressMode=%d\n\n", CACHE_EFFICIENT, SPIKE_COMPRESS)
	printf("[id:0] start modeling\n")
    }

 start_time = pc.time
 mkcells(NCELLS)
  printf("mkcell-finished\n")
 connectcells(NCELLS, NETWORK, NSYNAPSE, SYNAPSE_RANGE)



     printf("connetcel-finished\n")

 setModel(MODEL)
     printf("setmode-finished\n")

//  for debug
    pc.barrier()
 if(pc.id == 0){
print "debug-rep  NCELLS,NSTIM_POS,NSTIM_NUM\n"
print NCELLS,NSTIM_POS,NSTIM_NUM
//print_stat()
}


 mkstim(NCELLS, NSTIM_POS, NSTIM_NUM)
if (Debug){
  for i=0, ncstimlist.count -1 {
   printf("ncstim num %d -delay%d\n", i, ncstimlist.object(i).delay)
    printf("ncstim num %d -active%d\n", i, ncstimlist.object(i).active)
        printf("ncstim num %d -active%d\n", i, ncstimlist.object(i).weight)

  }
print "nclistck ended"

print "stim-lists"
 for i = 0, stimlist.count - 1 {
    objref stim
    stim = stimlist.object(i)
    print "Stimulus ", i, ":"
    print "  number = ", stim.number
    print "  start = ", stim.start
    print "  interval = ", stim.interval
 }
print "stimlist ended"


 print "synlist-count", synlist.count
 for i = 0, synlist.count - 1 {
// not good     print "Object ", i, " type: ", synlist.object(i).hoc_internal_name()
// not good    print "Object ", i, " type: ", synlist.object(i).hname()
//not good    print "Object ", i, " type: ", synlist.object(i).e
    printf (" rev-p:%g \n ", synlist.object(i).e)
    printf (" tau:%g \n ", synlist.object(i).tau1)
    
    print " go \n"
//not good
//objref csyn
//    csyn = synlist.object(i)


    print "Synapse id", i, ":"


}
print "synlist-ck finished"

print "nccheck"
 for i = 0, nclist.count - 1 {
   print "ncnumber",i
   printf("delay%g \n", nclist.object(i).delay )
      printf("thresshold%g \n", nclist.object(i).threshold )  
   printf("gid %f \n",nclist.object(i).srcgid)
 }
print "nccheck-finished"


}
// Debug report ended


    //Netstim is may not supported in coreneuron
// failure
//vmkstim(NCELLS, NSTIM_POS, NSTIM_NUM)

//    spikerecord()
    
 pc.barrier()
    //if(MULTISPLIT==1){ pc.multisplit() }
    //if(CACHE_EFFICIENT==1){ pc.cache_efficient(1) }
    //if(CACHE_EFFICIENT==1){ pc.multisplit() }
    
  pc.set_maxstep(5)
 {load_file("recorder.hoc")}
//      setVoltageRecord()
//      spikerecord()

 svec = new Vector()
 sgidvec = new Vector()
 pc.spike_record(-1, svec, sgidvec) 

//    tstop = STOPTIME
//    stdinit()
//    tstop = STOPTIME


 if(pc.id == 0){ printf("[id:0] Modeling Finished.\n") }
 if(pc.id == 0){ printf("[id:0] Calculation Starts\n") }
 pc.barrier()

  printf ("start cal (all mod")
//    print startsw()    
 modelfin_time = pc.time
 start_waittime = pc.wait_time
 if(pc.id == 0){startsw()}
 if(pc.id == 0){
                   printf("pre-psolve\n")
                   printf("check3 * NSTEP=%d (STOPTIME=%lf / dt=%lf)\n", STOPTIME/dt, STOPTIME, dt)
	       }
	       

//0919 need?
//finitialize?
 stdinit()
//   start sim
cvode.use_fast_imem(1)
pc.nrnbbcore_write("coredat")

pc.nrncore_run("--mpi --. coredat")
// pc.psolve(tstop)
 
 pc.barrier()
 if(pc.id == 0){ printf("[id:0] Calculation Finished !!\n") }
 if(pc.id == 0){
   print "Global spike times:test1  ", svec
 startsw()}
 
 stop_time = pc.time
 stop_waittime = pc.wait_time()
 stop_steptime = pc.step_time()
 stop_sendtime = pc.send_time()
//    fprintVoltageRecord()
//    fprintVoltageVecRecord()    
 pc.barrier()
 if(pc.id ==0){
	printf("\nRESULT : \n")
	printf(" * SpikeSendMax=%d\n", pc.spike_statistics() )
	printf(" * step=%lf sec, wait=%lf sec, send=%f sec\n", stop_steptime, stop_waittime-start_waittime, stop_sendtime)
	printf(" * modeling time : %f sec\n", modelfin_time - start_time)
	printf(" * core time : %f sec\n", stop_time-modelfin_time)
  }
    
  pc.barrier()
   if(pc.id ==0){  
   printf("[%d] NC = %d, SYN = %d, tmp_pre = %d, tmp_post = %d\n", pc.id, nclist.count(), synlist.count(), tmp_pre, tmp_post)}
   
    
//  if(SHOW_SPIKE==1){ spikeout() }

//  printSpikeStat()

    //quit()
    //pc.max_histogram()
if(pc.id == 0){printf("finished all check")}

// pc.runworker()

rep_last=0
if (rep_last){
 if(pc.id == 0){
    print"--------------------------last rep section-------------------------------\r\n"
    print "Global spike times: 2nd ", svec
// not good    printf( "--print-spike-statics-xy%d \n",svec.x[0])
  //svec.printf() 
    sgidvec.printf() 
    print"sgidvec---"
    print sgidvec
    print "--check-size spike---"
    print "Number of spikes recorded: ", svec.size
    print"---check-rev1"
    print "Stimuli created for cells"
    objref stimck
  print "stimulist\n",stimlist
  print stimlist.coount
for i = 0, stimlist.count - 1 {
//      stimck = stimlist.object(i)
//    print "Stimulus ", i, ":"
//    print "  number = ", stimck.number
//    print "  start = ", stimck.start
//    print "  interval = ", stimck.interval
}

 objref ncon
 print "ncstimlist",ncstimlist
 print ncstimlist.count
 for i = 0, ncstimlist.count - 1 {
//    ncon = ncstimlist.object(i)
//    print "NetCon ", i, ":"
//    print "  delay = ", ncon.delay
//    print "  weight = ", ncon.weight
 }
}
}

pc.done()
pc.barrier()
printSpikeStat()
// end of main
}


// change the place 
//{chdir("../f_job")}
main()

print "Debug: Before quit()"

// kako for main end
print "after last barrier"

quit()
